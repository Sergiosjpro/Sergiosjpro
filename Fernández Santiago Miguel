import tkinter as tk
from tkinter import messagebox

class Producto:
    def __init__(self, nombre, precio, app):
        self.nombre = nombre
        self.precio = precio
        self.app = app
        self.cantidad = 0

    def agregar_al_total(self):
        self.cantidad += 1
        self.app.total += self.precio
        self.app.actualizar_total()
        self.app.actualizar_cantidad(self)
        self.app.actualizar_listbox(self.nombre, self.precio)

    def eliminar_del_total(self):
        if self.cantidad > 0:
            self.cantidad -= 1
            self.app.total -= self.precio
            self.app.actualizar_total()
            self.app.actualizar_cantidad(self)
            self.app.eliminar_de_listbox(self.nombre, self.precio)
        else:
            messagebox.showwarning("Advertencia", "No puedes eliminar más unidades de este producto.")

    def reiniciar_cantidad(self):
        self.cantidad = 0
        self.app.actualizar_cantidad(self)

class CalculadoraPrecios:
    def __init__(self, root):
        self.root = root
        self.root.title("Calculadora de Precios")
        
        # Crear un marco principal con dos sub-marcos: uno para los productos y otro para el Listbox
        main_frame = tk.Frame(root)
        main_frame.pack(padx=20, pady=20, fill=tk.BOTH, expand=True)

        # Frame para las categorías de productos (izquierda)
        self.frame_productos = tk.Frame(main_frame)
        self.frame_productos.pack(side=tk.LEFT, padx=10, pady=10)

        # Frame para el Listbox (derecha)
        self.frame_listbox = tk.Frame(main_frame)
        self.frame_listbox.pack(side=tk.RIGHT, padx=10, pady=10, fill=tk.BOTH, expand=True)

        self.total = 0.0

        # Crear categorías de productos con nombres y precios predefinidos
        self.categorias = {
            "Categoría 1": [
                Producto("Producto 1A", 10.99, self),
                Producto("Producto 1B", 5.49, self),
                Producto("Producto 1C", 7.99, self),
            ],
            "Categoría 2": [
                Producto("Producto 2A", 12.99, self),
                Producto("Producto 2B", 6.79, self),
                Producto("Producto 2C", 9.99, self),
            ],
            "Categoría 3": [
                Producto("Producto 3A", 8.49, self),
                Producto("Producto 3B", 3.29, self),
                Producto("Producto 3C", 14.99, self),
            ],
        }

        self.producto_frames = {}  # Para almacenar los frames de cada producto

        # Crear interfaces para cada categoría de productos
        for categoria, productos in self.categorias.items():
            tk.Label(self.frame_productos, text=categoria, font=('Arial', 14, 'bold')).pack(pady=10)
            
            for producto in productos:
                frame_producto = tk.Frame(self.frame_productos)
                frame_producto.pack(pady=5)
                self.producto_frames[producto] = frame_producto

                agregar_btn = tk.Button(frame_producto, text=f"Agregar {producto.nombre} - ${producto.precio:.2f}",
                                        command=producto.agregar_al_total)
                agregar_btn.pack(side=tk.LEFT, padx=5)

                eliminar_btn = tk.Button(frame_producto, text=f"Eliminar {producto.nombre}",
                                         command=producto.eliminar_del_total)
                eliminar_btn.pack(side=tk.LEFT, padx=5)

                cantidad_label = tk.Label(frame_producto, text="Cantidad: 0")
                cantidad_label.pack(side=tk.LEFT, padx=5)
                producto.cantidad_label = cantidad_label

        # Listbox para mostrar los productos agregados
        self.listbox = tk.Listbox(self.frame_listbox, width=40, height=20)
        self.listbox.pack(padx=10, pady=10, fill=tk.BOTH, expand=True)

        # Botón Comprar
        self.comprar_btn = tk.Button(self.frame_listbox, text="Comprar", command=self.mostrar_precio_final)
        self.comprar_btn.pack(pady=10)

    def actualizar_total(self):
        # Este método sigue siendo necesario para actualizar el total interno.
        pass

    def actualizar_cantidad(self, producto):
        producto.cantidad_label.config(text=f"Cantidad: {producto.cantidad}")

    def actualizar_listbox(self, nombre, precio):
        self.listbox.insert(tk.END, f"{nombre} - ${precio:.2f}")

    def eliminar_de_listbox(self, nombre, precio):
        # Buscar y eliminar el primer producto que coincida con el nombre y precio
        for i in range(self.listbox.size()):
            item = self.listbox.get(i)
            if item == f"{nombre} - ${precio:.2f}":
                self.listbox.delete(i)
                break

    def mostrar_precio_final(self):
        # Mostrar el precio total en un messagebox
        messagebox.showinfo("Precio Final", f"El precio total a pagar es: ${self.total:.2f}")
        
        # Reiniciar cantidades de todos los productos
        for productos in self.categorias.values():
            for producto in productos:
                producto.reiniciar_cantidad()
        
        # Limpiar el Listbox
        self.listbox.delete(0, tk.END)
        
        # Reiniciar el total a 0
        self.total = 0.0

if __name__ == "__main__":
    root = tk.Tk()
    app = CalculadoraPrecios(root)
    root.mainloop()


 
